from src import utils
from src.model import model_androguard
from src.data import data_androguard
from src.analysis import andro_analysis
from src.data import mamadroid_implementation as mama
import sys
#from config import data_params
import numpy as np
import pandas as pd

import os, sys, inspect
import json


import os, sys, inspect
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
parentdir = os.path.dirname(currentdir)
sys.path.insert(0,parentdir)



DATA_PARAMS = 'config/data-params.json'
MODEL_PARAMS = 'config/model.json'
TEST_PARAMS = 'config/test.json'
FEATURE_PARAMS = "config/features.json"
MAMA_PARAMS = "config/mamadroid_params.json"


currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))


def load_params(fp):
    with open(fp) as fh:
        param = json.load(fh)

    return param


def main(targets):
    """
    runs the targets
    targets --> a list of targets
    """

    #["data", "feature", "model", "train", "test", "makefile"
    if "data" in targets:
        data_config = load_params(DATA_PARAMS)
        stack = data.train_txt(data_config["benign"], data_config["malicious"], data_config["random"])
        dd = data.full_info(data_config["train_set"], "train")
        dd = data.full_info(data_config["test_set"], "test")
        print(dd)

        data.get_unique_apilist(data_config["train_data"])

        # process csv to get complete apis
        data.process_csv(data_config["train_data"], "src/data/csv/train_processed.csv")
        data.process_csv(data_config["test_data"],  "src/data/csv/test_processed.csv")


        # merge processed with unique api list to ease computation
        data.get_merged(data_config["train_processed"], data_config["unique_calls"], "src/data/csv/merged_train.csv")
        data.get_merged(data_config["test_processed"], data_config["unique_calls"], "src/data/csv/merged_test.csv")



    if "feature" in targets:
        feature_config = load_params(FEATURE_PARAMS)
        get_A(feature_config["train_merged"], "train")
        get_A(feature_config["train_merged"], "test")

        get_P(feature_config["train_merged"])
        get_B(feature_config["codeblocks_txt"], feature_config["unique_calls"])



    if 'test' in targets:
        with open(TEST_PARAMS) as fh:
            test_cfg = json.load(fh)

        benign_dir = test_cfg['test_benign']
        malicious_dir =test_cfg['test_malicious']

        target = test_cfg["test_outputs"]
        # get txt with labels:
        txt = os.path.join(target, "app_label_id.txt")

        if os.path.exists(txt):
            os.remove(txt)
            data_androguard.train_txt(malicious_dir, benign_dir, benign_dir, target)
        else:
            data_androguard.train_txt(malicious_dir, benign_dir, benign_dir, target)


        # run metapath2vec
        data = pd.read_csv(txt)
        filepaths, label = list(data.app_fp), list(data.app_label)


        bigX = []
        bigY = []

        for graph in range(len(filepaths)):
            X, y = data_androguard.metapath2vec(filepaths[graph], label[graph])
            for item in range(len(X)):
                bigX.append(X[item])
                bigY.append(y[item])
                
        
        
        ordering = np.random.choice(range(len(bigX)), size = len(bigX), replace = False)
        Xtrain = [bigX[i] for i in ordering[:30]]
        Xtest = [bigX[i] for i in ordering[30:]]
        ytrain = [bigY[i] for i in ordering[:30]]
        ytest = [bigY[i] for i in ordering[30:]]
        
        print("Testing on: X = ", Xtest)
        print("Testing on: y = ", ytest)
        
        model = model_androguard.model("SVM", Xtrain, ytrain, Xtest, ytest)
        score = model.get_acc()
        print("Accuracy for test is: ",score)
    if "mamadroid" in targets:
        ## builds the baseline features
        
        with open(MAMA_PARAMS) as fh:
            mama_cfg = json.load(fh)
            
            
            
        malicious_apks = os.listdir(mama_cfg["malware_dir"])
        popular_apks = os.listdir(mama_cfg["popular_dir"])
        random_apks = os.listdir(mama_cfg["random_dir"])
        target = mama_cfg["out_dir"]
        
        # currently use vectorize, have to test with concurrency
        vfunc = np.vectorize(get_markov)
        
        # FAMILY and PACKAGE mode (malware)
        results = vfunc(np.array(malware_apks), target, "FAMILY")
        results = vfunc(np.array(malware_apks), target, "PACKAGE")
        
        # FAMILY and PACKAGE mode (popular apps)
        results = vfunc(np.array(popular_apks), target, "FAMILY")
        results = vfunc(np.array(popular_apks), target, "PACKAGE")
        
        # FAMILY and PACKAGE mode (random apps)
        results = vfunc(np.array(random_apks), target, "FAMILY")
        results = vfunc(np.array(random_apks), target, "PACKAGE")
        
        
        files = os.listdir(target)
        # create 2 lists, one being family, one being package, so we can get 
        # 2 different lengths.
        
        for file in range(len(files)):
            filename = files[file]
            if 
        
        

    return None


if __name__ == "__main__":
#     target = sys.argv[1:]
#     main(target)
    
    params = load_params("config/mamadroid_params.json")
    print("Does path exist? ", os.path.exists(params["out_dir"]))
    
