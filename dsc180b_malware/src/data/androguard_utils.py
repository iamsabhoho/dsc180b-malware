
def useful_functions(a, d, dx):
    """
    some useful functions for a decompiled APK


    a --> APK object
    d --> array of DalvikVMFormat object
    dx --> analysis object


    """


    ### attributes and methods for a --> APK Class
    test_obj = a.get_permissions()
    # Returns all requested permissions.
    test_obj = a.get_requested_aosp_permissions_details()
    # Returns requested aosp permissions with details.
    test_obj = a.get_libraries()
    # Return the android:name attributes for libraries
    display(type(test_obj))
    ### attributes and methods for d --> DalvikVMFormat
    test_d = d[0].get_all_fields()
    # Return a list of field items
    test_d = d[0].get_classes()
    # Returns all classes --> returns a ClassDefItem
    test_d = d[0].get_fields()
    # Returns all field objects --> EncodedField Object
    test_d = d[1].get_len_methods()
    # Return the number of methods
    test_d = d[1].get_methods()
    # Returns all method objects --> EncodedMethod Objects
    test_d = d[1].get_strings()
    # returns all Strings
    # test_d
    # for item in test_d:
    #     if len(item.get_name()) > 1:
    #         print(item.get_name())
    ### Prints the fields, or classes, or methods, (can be used for EDA)
    # ct = 0
    # for item in d[0].get_fields():
    #     if ct < 600:
    #         print(item)
    #         ct+= 1
    #     else:
    #         break


def get_graph_info(digraph):
    """
    Takes in a networkx digraph and output some statistics for the graph

    params: digraph --> networkx digraph object
    prints: --> number of nodes, and edges.
    """

    print("Number of nodes in this graph is: ", len(digraph.nodes()))
    print("Number of edges in this graph is: ", len(digraph.edges()))
