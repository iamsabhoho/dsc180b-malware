
import numpy as np
import os


import numpy as np
from sklearn.pipeline import Pipeline, make_pipeline
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import normalize
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report, accuracy_score


import sys,inspect
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
parentdir = os.path.dirname(currentdir)
sys.path.insert(0,parentdir)

from data import data_androguard



class model_creation:

    def __init__(self, model_type, Xtrain, ytrain, Xtest, ytest):
        self.X_train, self.y_train, self.X_test, self.y_test = Xtrain, ytrain,Xtest,ytest

        # if model_type == "baseline":
            # self.clf = self.init_baseline()

        if model_type == "baseline":
            self.init_baseline(self.X_train, self.y_train, self.X_test, self.y_test)

        elif model_type == "SVM":
            # https://scikit-learn.org/stable/modules/svm.html#using-the-gram-matrix
            # returns accuracy score
            self.acc = self.svm_model(self.X_train, self.y_train, self.X_test, self.y_test)

        elif model_type == "KNN":
            # https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html
            self.clf = KNeighborsClassifier(n_neighbors = 3)


    def init_baseline(self, X_train, y_train, X_test, y_test):
        '''
        baseline is MamaDroid, which uses Random Forests, 1NN, 3NN and SVM
        '''

        self.clf = RandomForestClassifier().fit(X_train, y_train)
        print("train score on random forest: ", self.clf.score(X_train, y_train))
        print("test score on random forest: ", self.clf.score(X_test, y_test))
        
        print("\n")
        
        self.clf = KNeighborsClassifier(n_neighbors = 1).fit(X_train, y_train)
        print("train score on 1nn: ", self.clf.score(X_train, y_train))
        print("test score on 1nn: ", self.clf.score(X_test, y_test))
        
        print("\n")
        
        self.clf = KNeighborsClassifier(n_neighbors = 3).fit(X_train, y_train)
        print("train score on 3nn: ", self.clf.score(X_train, y_train))
        print("test score on 3nn: ", self.clf.score(X_test, y_test))
        
        


    def svm_model(self, X_train, y_train, X_test, y_test):
        '''
        SVM model
        '''

        X_train = np.array(X_train)
        y_train = np.array(y_train)

        # svm model
        self.clf = SVC(kernel='linear', C=1.0)

        # fit
        self.clf.fit(X_train, y_train)

        # predict
        y_pred = self.clf.predict(X_test)

        # accuracy score
        self.acc = accuracy_score(y_test, y_pred)

        # classification report: precision, recall, f1-score, support
        print(classification_report(y_test, y_pred))

        return self.acc
    
    def get_acc(self):
        return self.acc

def baseline(X_family, X_package, y_family, y_package, pcas = [10]):
    """
    Baseline is the mamadroid model
    
    pcas --> list of components to try
    """
    
    for pca in pcas:
        print("\n When PCA components = ", pca)
        pca = PCA(n_components = pca)
        X_family = normalize(X_family, norm = "l1", axis = 1)
        X_family_pca = pca.fit_transform(X_family.toarray())
        
        X_package = normalize(X_package, norm = "l1", axis = 1)
        X_package_pca = pca.fit_transform(X_package.toarray())
        
        
        X_family_train, X_family_test, y_family_train, y_family_test = train_test_split(X_family_pca, y_family, test_size = 0.15, shuffle = True)

        X_package_train, X_package_test, y_package_train, y_package_test = train_test_split(X_package_pca, y_package, test_size = 0.15, shuffle = True)
        
        print("For FAMILY mode, the scores are: ")
        family = model_creation("baseline", X_family_train, y_family_train, X_family_test, y_family_test)
        
        print("\nFor PACKAGE mode, the scores are: ")
        package = model_creation("baseline", X_package_train, y_package_train, X_package_test, y_package_test)
        
        
    return "Done"


if __name__ == "__main__":
    print("main")
