
import numpy as np
import os


import numpy as np
from sklearn.pipeline import Pipeline, make_pipeline
from sklearn.linear_model import LogisticRegression
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report, accuracy_score


import sys,inspect
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
parentdir = os.path.dirname(currentdir)
sys.path.insert(0,parentdir)

from data import data_androguard



class model:

    def __init__(self, model_type, Xtrain, ytrain, Xtest, ytest):
        self.X_train, self.y_train, self.X_test, self.y_test = Xtrain, ytrain,Xtest,ytest

        # if model_type == "baseline":
            # self.clf = self.init_baseline()

        if model_type == "baseline":
            self.clf = LogisticRegression()

        elif model_type == "SVM":
            # https://scikit-learn.org/stable/modules/svm.html#using-the-gram-matrix
            # returns accuracy score
            self.acc = self.svm_model(self.X_train, self.y_train, self.X_test, self.y_test)

        elif model_type == "KNN":
            # https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html
            self.clf = KNeighborsClassifier(n_neighbors = 3)


    def init_baseline(self, X, y):
        '''
        baseline is logistic regression
        '''

        self.clf = LogisticRegression().fit(X, y)

        score = self.clf.score(X, y)

        return self.clf


    def svm_model(self, X_train, y_train, X_test, y_test):
        '''
        SVM model
        '''

        X_train = np.array(X_train)
        y_train = np.array(y_train)

        # svm model
        self.clf = SVC(kernel='linear', C=1.0)

        # fit
        self.clf.fit(X_train, y_train)

        # predict
        y_pred = self.clf.predict(X_test)

        # accuracy score
        self.acc = accuracy_score(y_test, y_pred)

        # classification report: precision, recall, f1-score, support
        print(classification_report(y_test, y_pred))

        return self.acc
    
    def get_acc(self):
        return self.acc



if __name__ == "__main__":
    print("main")
