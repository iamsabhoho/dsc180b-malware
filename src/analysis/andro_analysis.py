from androguard import misc
from androguard import session
from stellargraph import StellarGraph
import networkx as nx
from androguard.core.analysis import auto
from datetime import datetime
import sys
import os
import pandas as pd
import concurrent.futures
import numpy as np
import matplotlib.pyplot as plt

## getting utils
import sys,inspect
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
parentdir = os.path.dirname(currentdir)
sys.path.insert(0,parentdir)
import utils
import data_androguard as data

import logging

# logging
logging.basicConfig(filename='log.txt', filemode='a',
                    format='%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s',
                    datefmt='%H:%M:%S',
                    level=logging.DEBUG)


def eda(graph):
    '''
    eda for an apk

    graph --> filepath to a graph
    returns a dictionary in case
    '''

    #target = "/datasets/home/00/300/ssh026/dsc180b-malware/src/analysis/features"
    target = "/teams/DSC180A_FA20_A00/a04malware/personal-group03/eda_sab/features"

    try:
        networkx = nx.read_gml(graph)
    except:
        return graph + " might be broken!"

    stellar = StellarGraph.from_networkx(networkx, node_type_attr = "type")
    app_dir, app_filename = os.path.split(graph)

    #building output
    out_csv = os.path.join(target, (app_filename + ".txt"))

    if os.path.exists(out_csv):
        logging.info("Log info: output exists already")
        return
    else:
        data = {}
        
        # get number of nodes and edges
        data["app"] = graph
        data["node_types_counts"] = len(stellar.node_types)
        data["node_types"] = list(stellar.node_types)
        data["number_nodes"] = len(stellar.nodes())
        data["number_edges"] = len(stellar.edges())
        
        if "benign" in app_dir:
            label = 0
        else:
            label = 1
        
        data["label"] = label
        
        items = list(data.values())
        
        file = open(out_csv, "ab")
        first = np.array([["app", "node_types_counts", "node_types", "number_nodes", "number_edges", "label"]])
        np.savetxt(file, [items], delimiter = ",", fmt = "%s")
        file.close()
        logging.info("Log info: eda data done")

        
        return data



def process(fps):
    """
    runs eda on file paths within the directory

    fps --> list of filepaths
    
    """
    with concurrent.futures.ThreadPoolExecutor() as executor:
        futures = {executor.submit(eda, fp): fp for fp in fps}
        for future in concurrent.futures.as_completed(futures):
            file_p = futures[future]
            logging.info("Log info: before process")
            data = future.result()
            logging.info("Log info: after process")
            #print(file_p)


def eda_plot(data):
    """
    plot the eda data

    data --> from eda
    """

    df = pd.DataFrame.from_dict(data)

    # b vs. m: node types
    f1 = pd.crosstab(df['label'], df['node_types'])
    f1.plot.bar()
    fig = plt.gcf()
    plt.legend(loc='upper left')
    plt.title('Benign vs. Malicious: Node Types')
    fig.savefig('bv_node_types.png')

    # b vs. m: edge types
    f2 = pd.crosstab(df['label'], df['edge_types'])
    f2.plot.bar()
    fig = plt.gcf()
    plt.legend(loc='upper left')
    plt.title('Benign vs. Malicious: Edge Types')
    fig.savefig('bv_edge_types.png')

    # b vs. m: number edge
    df1 = df.groupby(['label'])['number_edges'].value_counts().unstack().iloc[0].to_frame().dropna()
    df2 = df.groupby(['label'])['number_edges'].value_counts().unstack().iloc[1].to_frame().dropna()
    df1 = df1.index.to_frame()
    df1.index = np.arange(1, len(df1) + 1)
    df2 = df2.index.to_frame()
    df2.index = np.arange(1, len(df2) + 1)

    fig, axes = plt.subplots(nrows=1, ncols=2)
    df1.plot.bar(ax=axes[0])
    df2.plot.bar(ax=axes[1], color='orange')
    fig.suptitle('Benign vs. Malicious: Number of Edges')
    axes[0].legend(['benign'])
    axes[1].legend(['malicious'])
    fig.tight_layout(pad=3.0)
    axes[0].set_xlabel('Apps')
    axes[0].set_ylabel('Number of Edges')
    axes[1].set_xlabel('Apps')
    plt.xticks(np.arange(len(df2), step=50))
    fig.savefig('bv_edge_num.png')

    # b vs. m: number nodes
    df3 = df.groupby(['label'])['number_nodes'].value_counts().unstack().iloc[0].to_frame().dropna()
    df4 = df.groupby(['label'])['number_nodes'].value_counts().unstack().iloc[1].to_frame().dropna()
    df3 = df3.index.to_frame()
    df3.index = np.arange(1, len(df3) + 1)
    df4 = df4.index.to_frame()
    df4.index = np.arange(1, len(df4) + 1)

    fig, axes = plt.subplots(nrows=1, ncols=2)
    df3.plot.bar(ax=axes[0])
    df4.plot.bar(ax=axes[1], color='orange')
    fig.suptitle('Benign vs. Malicious: Number of Nodes')
    axes[0].legend(['benign'])
    axes[1].legend(['malicious'])
    fig.tight_layout(pad=3.0)
    axes[0].set_xlabel('Apps')
    axes[0].set_ylabel('Number of Nodes')
    axes[1].set_xlabel('Apps')
    plt.xticks(np.arange(len(df4), step=50))
    fig.savefig('bv_node_num.png')



if __name__ == "__main__":
    
    #target = utils.get_to_directory("edh021", ["DSC180A_FA20_A00", "a04malware", "personal-group03", "benign_graphs"])
    #malware_directory = utils.get_to_directory("edh021", ["DSC180A_FA20_A00", "a04malware", "apks", "malware"])
    #benign1_directory = utils.get_to_directory("edh021", ["DSC180A_FA20_A00", "a04malware", "personal-group03", "benign_graphs_sab", "popular_apks"])
    #benign2_directory = utils.get_to_directory("edh021", ["DSC180A_FA20_A00", "a04malware", "personal-group03", "benign_graphs_sab", "random_apps"])


    # file paths
    target = "/teams/DSC180A_FA20_A00/a04malware/personal-group03/eda_sab/features/"
    #target = "/datasets/home/00/300/ssh026/dsc180b-malware/src/analysis/features"

    # popular
    benign1_directory = "/teams/DSC180A_FA20_A00/a04malware/personal-group03/benign_graphs_sab/popular_apks/"

    # random
    benign2_directory = "/teams/DSC180A_FA20_A00/a04malware/personal-group03/benign_graphs_sab/random_apps/"
    
    # malware
    malware_directory = "/teams/DSC180A_FA20_A00/a04malware/apks/malware/"


    df = data.train_txt(malware_directory, benign1_directory, benign2_directory)
    #logging.info("len of df: " + len(df))
    print("LEN OF DF: ", len(df))
    filepaths, labels = list(df.app_fp), list(df.app_label)
    
    logging.info("Log info: START process")
    now = datetime.now()
    out = process(filepaths)
    logging.info("Log info: END process")
    print("time took to go through every file: ", (datetime.now() - now))
    

    columns = ["app", "node_types_counts", "node_types", "number_nodes", "number_edges", "label"]
    
    df = pd.DataFrame(columns = columns)
    ct = 0 

    for fp in os.listdir(target):
        if ".txt" in fp:
            built = os.path.join(target, fp)
            with open(built, "r") as file:
                line = file.read().split(",")
                data = {}
                if (len(line) == len(columns)):
                    for col in range(len(columns)):
                        data[columns[col]] = line[col]

                    df = df.append(data, ignore_index = True)
                else:
                    continue
                    
    df.to_csv("eda_sab.csv")
    logging.info("Log info: eda ALL done")
        
        


