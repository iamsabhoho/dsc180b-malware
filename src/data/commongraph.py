import os
import data_androguard as data
import numpy as np
import pandas as pd
from tqdm import tqdm
from stellargraph import StellarGraph
from stellargraph import IndexedArray
from stellargraph.data import UniformRandomMetaPathWalk
from gensim.models import Word2Vec


import sys,inspect
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
parentdir = os.path.dirname(currentdir)
sys.path.insert(0,parentdir)
import utils


def get_large_df(common_graph_txts):
    """
    gets the large dataframe of edges
    
    apps --> list of filepaths to the edges txt
    """
    apps = utils.list_files(common_graph_txts)
    lst_of_dfs = []
    dummy = pd.DataFrame()
    bad_b1 = [3240, 4500]
    bad_b2 = [3300, 4560]
    for batch in range(0, 151):
        b1 = batch * 60
        b2 = (batch + 1) * 60

        if (b1 not in bad_b1) & (b2 not in bad_b2):
            lst_of_dfs = lst_of_dfs + [pd.read_csv(file, delimiter = " ", header = None) if ".txt" in file else dummy for file in apps[b1:b2]]
    concat = pd.concat(lst_of_dfs, ignore_index = True)
    concat.columns = ["source", "target", "weight", "type1", "type2"]
    concat.type1 = concat.type1.apply(fix_node_type)
    concat.type2 = concat.type2.apply(fix_node_type)
    
    no_dup = concat.drop_duplicates(subset = "source", keep = "last")
    dct = no_dup.groupby(['type1'])['source'].apply(lambda grp: list(grp.value_counts().index)).to_dict()
    
    for key in dct.keys():
        dct[key] = IndexedArray(index = dct[key])
    
    commongraph = StellarGraph(dct, concat[["source", "target", "weight"]])
    return commongraph

def common_metapath2vec(metapathsFP, common_graph_txts):
    """
    from the filepath, returned a combined list of all metapaths
    
    metapathsFP --> filepath to the directory containing all metapaths
                    should be: "/teams/DSC180A_FA20_A00/a04malware/personal-group03/actualdroid_intermediate_files/metapath2vec_metapaths"
                    
    common_graph_txts --> path to a folder containing elements of the common graph
                    should be: "/teams/DSC180A_FA20_A00/a04malware/personal-group03/common_graph/common_graph_txts"
    """
    # get common graph
    commongraph = get_large_df(common_graph_txts)
    
    # get all metapaths
    metapaths_fps = utils.list_files(metapathsFP)
    metapaths = []
    for mp in metapaths_fps:
        try:
            metapath = np.loadtxt(mp, dtype = object)
            metapath = [[common.fix_node_type(node) for node in lst.split("->")] for lst in metapath]
            metapaths = metapaths + metapath
        except:
            continue
    
    # start traversal
    walk_length = 100
    rw = UniformRandomMetaPathWalk(commongraph)
    walks = rw.run(
        nodes=list(commongraph.nodes()),  # root nodes
        length=walk_length,  # maximum length of a random walk
        n=1,  # number of random walks per root node
        metapaths=metapaths,  # the metapaths
    )
    print("Number of random walks: {}".format(len(walks)))
    
    return walks


    
    
def build_dict_nodetypes(df, dct, visited):
    """
    builds a dictionary of {node type:[nodes]}, from two arrays
    """
    type1 = set(list(df.type1))
    for kind in type1:
        nodes_of = set(list(edge[edge.type1 == kind].source))
        new_nodes = nodes_of - visited

        if kind in dct:
            new_index = list(dct[kind].index) + list(new_nodes)
            
            dct[kind] = pd.DataFrame(index = new_index)

        elif kind not in dct:
            dct[kind] = pd.DataFrame(index = nodes_of)
            
        visited.update(new_nodes)
            
            
            
    for key in dct.keys():
        index = list(dct[key].index)
        dct[key] = pd.DataFrame(index = list(set(index)))
    return dct, visited

def list_to_line(lst):
    """
    turns a list of items into a long string to write
    """
    lst = [str(i) for i in lst]
    return "".join(np.array(lst, dtype = object) + "\n")

def fix_node_type(node):
    """
    fixes some node types
    """
    
    if node == "Node":
        return node
    elif ",Node" not in node:
        node = node.replace("Node", ",Node")
        return node
    else:
        return node
    




