import os
import data_androguard as data
import numpy as np
import pandas as pd
from tqdm import tqdm
from stellargraph import StellarGraph
from stellargraph import IndexedArray
import sys,inspect
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
parentdir = os.path.dirname(currentdir)
sys.path.insert(0,parentdir)
import utils


def get_large_df(apps):
    """
    gets the large dataframe of edges
    
    """
    edges = pd.DataFrame(columns = ["source", "target", "weight", "type1", "type2"])
    for ind in tqdm(range(len(apps))):
        file = apps[ind]
        try:
            edge = pd.read_csv(file, delimiter = " ", header = None)
            edge.columns = ["source", "target", "weight", "type1", "type2"]
            edges.append(edge, ignore_index = True)
        except:
            continue
        
    return edges


def to_large_files(apps):
    """
    concatenates into a large file
    """
    # edges = pd.DataFrame(columns = ["source", "target", "weight", "type1", "type2"])

    source = open("/teams/DSC180A_FA20_A00/a04malware/personal-group03/common_graph/source.txt", 'a')
    target = open("/teams/DSC180A_FA20_A00/a04malware/personal-group03/common_graph/target.txt", 'a')
    weight = open("/teams/DSC180A_FA20_A00/a04malware/personal-group03/common_graph/weight.txt", 'a')
    type1 = open("/teams/DSC180A_FA20_A00/a04malware/personal-group03/common_graph/type1.txt", 'a')
    type2 = open("/teams/DSC180A_FA20_A00/a04malware/personal-group03/common_graph/type2.txt", 'a')



    for ind in tqdm(range(len(apps))):
        file = apps[ind]
        try:
            edge = pd.read_csv(file, delimiter = " ", header = None)
            edge.columns = ["source", "target", "weight", "type1", "type2"]
#             source.write(list_to_line(list(edge.source)))
#             target.write(list_to_line(list(edge.target)))
#             weight.write(list_to_line(list(edge.weight)))
#             type1.write(list_to_line(list(edge.type1)))
#             type2.write(list_to_line(list(edge.type2)))

        except:
            continue
    source.close()
    target.close()
    weight.close()
    type1.close()
    type2.close()

def process1(df):
    """
    from the large df, outputs all unique nodes from the graph
    
    df --> large dataframe of columns: ["source", "target", "weight", "type1", "type2"], 
            containing all the edges in the common graph
    
    """
    dct = {}
    nodes = set(list(df.source) + list(df.target))
    for node in nodes:
        node_type1 = list(df[df.source == node].type1)
        node_type2 = list(df[df.source == node].type2)
        node_types = set(node_type1 + node_type2)
        
        if len(node_types) > 1:
            node_type = 
        
    return nodes

def process2(df):
    """
    
    """

def get_node_types_dict(df):
    """
    from 
    """
    
def build_dict_nodetypes(df, dct, visited):
    """
    builds a dictionary of {node type:[nodes]}, from two arrays
    """
    type1 = set(list(df.type1))
    for kind in type1:
        nodes_of = set(list(edge[edge.type1 == kind].source))
        new_nodes = nodes_of - visited

        if kind in dct:
            new_index = list(dct[kind].index) + list(new_nodes)
            
            dct[kind] = pd.DataFrame(index = new_index)

        elif kind not in dct:
            dct[kind] = pd.DataFrame(index = nodes_of)
            
        visited.update(new_nodes)
            
            
            
    for key in dct.keys():
        index = list(dct[key].index)
        dct[key] = pd.DataFrame(index = list(set(index)))
    return dct, visited

def list_to_line(lst):
    """
    turns a list of items into a long string to write
    """
    lst = [str(i) for i in lst]
    return "".join(np.array(lst, dtype = object) + "\n")

def get_common(apps):
    source = "/teams/DSC180A_FA20_A00/a04malware/personal-group03/common_graph/source.txt"
    target = "/teams/DSC180A_FA20_A00/a04malware/personal-group03/common_graph/target.txt"
    weight = "/teams/DSC180A_FA20_A00/a04malware/personal-group03/common_graph/weight.txt"
    type1 = "/teams/DSC180A_FA20_A00/a04malware/personal-group03/common_graph/type1.txt"
    type2 = "/teams/DSC180A_FA20_A00/a04malware/personal-group03/common_graph/type2.txt"
    
    with open(source, 'r') as file:
        source = [line.strip() for line in file]
    file.close()
    unique_nodes_1 = set(source)
    len(unique_nodes_1)
    with open(target, 'r') as file:
        target = [line.strip() for line in file]
    file.close()
    unique_nodes_2 = set(target)
    len(unique_nodes_2)
    all_unique_nodes = unique_nodes_1.union(unique_nodes_2)
    unique_nodes = "/teams/DSC180A_FA20_A00/a04malware/personal-group03/common_graph/unique_nodes.txt"
    with open(unique_nodes, "a") as file:
        file.write(list_to_line(list(all_unique_nodes)))
    file.close()
    
    unique_nodes_fp = "/teams/DSC180A_FA20_A00/a04malware/personal-group03/common_graph/unique_nodes.txt"
    unique_nodes = np.loadtxt(unique_nodes_fp, dtype = object)
    
    
    # gets the node_type and node classes 
    dct = {}
    visited = set()
    for ind in tqdm(range(len(apps))):
        file = apps[ind]
        try:
            edge = pd.read_csv(file, delimiter = " ", header = None)
            edge.columns = ["source", "target", "weight", "type1", "type2"]
            for node in unique_nodes:
                node_type1 = list(df[df.source == node].type1)
                node_type2 = list(df[df.source == node].type2)
                node_type = np.random.choice(list(set(node_type1 + node_type2)))

                if node_type not in dct:
                    dct[node_type] = [node]
                else:
                    dct[node_type].append(node)
                    

        except:
            continue
    # getting edges
    


