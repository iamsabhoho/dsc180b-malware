from androguard import misc
from androguard import session
from stellargraph import StellarGraph
import networkx as nx
import sys, os
import numpy as np
import lzma
from pickle import dump



def decompile_apk(filepath):
    '''
    decompiles an apk and returns a, d, dx

    filepath --> path to the APK file
    session_n --> session filename, extension is '.ag'

    function returns a list with items: [a, d, dx]
    a: APK object
    d: array of DalvikVMFormat
    dx: Analysis object
    '''

    current_dir = os.getcwd()
    target_dir = os.path.join(current_dir, "output_GROUP3_PICKLES")
    if not os.path.exists(target_dir):
        os.makedirs(target_dir)

    a, d, dx = misc.AnalyzeAPK(filepath)
    return [a, d, dx, target_dir]

def get_graph(apkobj, analysisobj, target):
    """
    gets the Control Flow Graph from a decompiled APK and pickles it
    """
    appname = apkobj.get_app_name()
    print("Working on App: ", appname)
    with lzma.open(os.path.join(target, "{}_apk.p.lzma".format(appname)), "wb") as file:
        dump(apkobj, file)
    file.close()

    with lzma.open(os.path.join(target, "{}_graph.p.lzma".format(appname)), "wb") as file:
        # It looks like here is the recursion problem...
        sys.setrecursionlimit(50000)
        graph = analysisobj.get_call_graph()
        dump(graph, file)
    file.close()


if __name__ == "__main__":
    now = datetime.now()
    #working on windows so there is a 'r'
    user_input = r"C:\Users\USER\Documents\GitHub\dsc180b-localtesting\data\Pinterest.apk"
    fp = os.path.join(user_input)
    print(fp)


    a, d, dx, target = decompile_apk(fp)
    get_graph(a, dx, target)

    print("time took for 1 app: ", (datetime.now() - now))
