from androguard import misc
from androguard import session
from stellargraph import StellarGraph
import networkx as nx


def decompile_apk(filepath, session_n = ""):
    '''
    decompiles an apk and returns a, d, dx

    filepath --> path to the APK file
    session_n --> session filename, extension is '.ag'

    function returns a list with items: [a, d, dx]
    a: APK object
    d: array of DalvikVMFormat
    dx: Analysis object
    '''

    # stores a session, we can return to work on this later
    if session != "":
        sess = misc.get_default_session()
        a, d, dx = misc.AnalyzeAPK(filepath, session = sess)
        session.Save(sess, "sessions/"+session_n)
        return [a, d, dx]
    else:
        a, d, dx = misc.AnalyzeAPK(filepath)
        return [a, d, dx]

def features_encoder(node_data):
    """
    encoding the feature dictionary from .get_call_graph() from Androguard
    """
    keywords= ["external", 'entrypoint', 'native', 'public', 'static'] #'vm', 'codesize']
    vector = []
    for keyword in keywords:
        try:
            if node_data[keyword] == True:
                vector.append(1)
            else:
                vector.append(0)
        except:
            vector.append(0)

    return vector

def features_encoder2(node_data):
    '''
    gets the node type for an individual node

    returns a string
    '''
    keywords = ["external", 'entrypoint', 'native', 'public', 'static']

    string = ""
    for keyword in keywords:
        if node_data[keyword] == True:
            string += (keyword + ",")

    string = string[:-1]
    string += "Node"
    return string

def call_graph(dx):
    """
    1. gets the call graph (CFG) from the analysis object (dx)
    2. processes the nodes by giving them a node_type for easier representation
    3. also gives edges representation

    returns a stellargraph.core.graph.StellarDiGraph object


    dx --> analysis object from decompiling an apk
    """

    call_graph_nx = dx.get_call_graph()
    for node_id, node_data in call_graph_nx.nodes(data = True):
        node_data['feature'] = features_encoder(node_data)
        node_data['type'] = features_encoder2(node_data)


    call_graph_sg = graph = StellarGraph.from_networkx(test_dx, node_features = \
    "feature", node_type_attr = 'type', edge_type_attr = 'offset')

    return call_graph_sg

if __name__ == "__main__":

    #
    # # testing on LOCAL DESKTOP COMPUTER ONLY
    # fp = "C:/Users/USER/Documents/GitHub/dsc180b-localtesting/data"
    # print("filepath is: ", fp)
    # a, d, dx = decompile_apk(fp)
    # print(call_graph(dx).info())
