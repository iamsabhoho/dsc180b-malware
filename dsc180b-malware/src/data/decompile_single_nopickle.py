from androguard import misc
from stellargraph import StellarGraph
import sys, os
import numpy as np
import sys

import networkx as nx

from datetime import datetime

def features_encoder(node_data):
    """
    encoding the feature dictionary from .get_call_graph() from Androguard
    """
    keywords= ["external", 'entrypoint', 'native', 'public', 'static'] #'vm', 'codesize']
    vector = []
    for keyword in keywords:
        try:
            if node_data[keyword] == True:
                vector.append(1)
            else:
                vector.append(0)

        except:
            vector.append(0)

    return vector

def features_encoder2(node_data):
    '''
    gets the node type for an individual node
    '''
    keywords= ["external", 'entrypoint', 'native', 'public', 'static']

    string = ""
    for keyword in keywords:
        if node_data[keyword] == True:
            string += (keyword + ",")

    string += "Node"
    return string



def decompile_apk(filepath):
    '''
    decompiles an apk and outputs a gml file of the graph. Will write to disk.

    filepath --> path to the APK file
    session_n --> session filename, extension is '.ag'


    '''

    current_dir = os.getcwd()
    target_dir = os.path.join(current_dir, "output_GROUP3_gml")
    if not os.path.exists(target_dir):
        os.makedirs(target_dir)

    # build fp
    path, app = os.path.split(filepath)
    app = app.replace(".apk", "")

    final_path = os.path.join(target_dir, (app + ".gml.bz2"))


    a, d, dx = misc.AnalyzeAPK(filepath)
    networkx_graph = dx.get_call_graph()

    mapping = {}
    for node_id, node_data in networkx_graph.nodes(data = True):
        mapping[node_id] = str(node_id.get_method().full_name)
        node_data['feature'] = features_encoder(node_data)
        node_data['type'] = features_encoder2(node_data)

    G = nx.relabel_nodes(networkx_graph, mapping)
    nx.write_gml(G, final_path)

    return "Done"


if __name__ == "__main__":
    now = datetime.now()
    user_input = r"C:\Users\USER\Documents\GitHub\dsc180b-localtesting\data\Pinterest.apk"
    decompile_apk(user_input)

    print("Time taken: ", (datetime.now() - now))
