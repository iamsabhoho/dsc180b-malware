from androguard import misc
from androguard import session
from stellargraph import StellarGraph
import networkx as nx
import sys, os
import numpy as np

from androguard.core.analysis import auto

import sys
import lzma
from pickle import dump





def decompile_apk(filepath, session_n = ""):
    '''
    decompiles an apk and returns a, d, dx

    filepath --> path to the APK file
    session_n --> session filename, extension is '.ag'

    function returns a list with items: [a, d, dx]
    a: APK object
    d: array of DalvikVMFormat
    dx: Analysis object
    '''

    # stores a session, we can return to work on this later
    if session != "":
        sess = misc.get_default_session()
        a, d, dx = misc.AnalyzeAPK(filepath, session = sess)
        session.Save(sess, "sessions/"+session_n)
        return [a, d, dx]
    else:
        a, d, dx = misc.AnalyzeAPK(filepath)
        return [a, d, dx]



def get_fp(directory):
    """
    gets the file paths of APK files in a given directory

    directory --> string FILEPATH of the directory that contains APK files
    """

    apks = [] # list of apk filenames
    apk_names = []
    for root, dirs, files in os.walk(directory):
        for name in files:
            if ".apk" in name:
                apk_fp = os.path.join(directory, name)
                apks.append(apk_fp)
                apk_names.append(name)

    return (apks, apk_names)


class AndroTest(auto.DirectoryAndroAnalysis):
    def __init__(self, path):
        super(AndroTest, self).__init__(path)
        self.has_crashed = False


def analyze_and_pickle(apk_fps, apk_names):



if __name__ == "__main__":
    filepath = []

    apk_fps = []
    apk_names = []
    for i, arg in enumerate(sys.argv):
        filepath.append(arg)

    for fp in filepath:
        one, two = get_fp(fp)
        apk_fps.append(one)
        apk_names.append(two)


    apk_fps = np.hstack(apk_fps)
    apk_names = np.hstack(apk_names)


    for apk_ind in range(0, len(apk_fps)):
        a, _, dx = misc.AnalyzeAPK(apk)
        with lzma.open("{}_apk.p.lzma").format(apk_name[apk_ind]), "wb") as fp:
            dump(a, fp)

        with lzma.open
