from androguard import misc
from androguard import session
from stellargraph import StellarGraph
import networkx as nx
import sys, os
import numpy as np
from datetime import datetime


from androguard.core.analysis import auto

import sys
import lzma
import dill as pickle


import warnings
warnings.filterwarnings('ignore') # comment out when sending this file!




def decompile_apk(filepath, session_n = ""):
    '''
    decompiles an apk and returns a, d, dx

    filepath --> path to the APK file
    session_n --> session filename, extension is '.ag'

    function returns a list with items: [a, d, dx]
    a: APK object
    d: array of DalvikVMFormat
    dx: Analysis object
    '''

    # stores a session, we can return to work on this later
    if session != "":
        sess = misc.get_default_session()
        a, d, dx = misc.AnalyzeAPK(filepath, session = sess)
        session.Save(sess, "sessions/"+session_n)
        return [a, d, dx]
    else:
        a, d, dx = misc.AnalyzeAPK(filepath)
        return [a, d, dx]


def get_fp(directory):
    """
    gets the file paths of APK files in a given directory

    directory --> string FILEPATH of the directory that contains APK files
    """

    apks = [] # list of apk filenames
    apk_names = []
    for root, dirs, files in os.walk(directory):
        for name in files:
            if ".apk" in name:
                apk_fp = os.path.join(directory, name)
                apks.append(apk_fp)
                apk_names.append(name)

    return (apks, apk_names)

def analyze_and_pickle(apk_fps, apk_names):
    """
    does the required analysis and outputs pickle files
    creates a folder named "output_GROUp3s_pickles", and adds the necessary
    files in it

    apk_fps --> a list of file paths to the apks
    apk_names --> a list of corresponding apk names
    """

    # create output folder
    current_dir = os.getcwd()
    target_dir = os.path.join(current_dir, "output_GROUP3_PICKLES")
    if not os.path.exists(target_dir):
        os.makedirs(target_dir)

    # start processing

    for apk_ind in range(0, len(apk_fps)):
        print("Working on: ", apk_names[apk_ind])
        a, _, dx = misc.AnalyzeAPK(apk_fps[apk_ind])
        # call_graph_fromdx = dx.get_call_graph()  # gets the CFG of an app, should be a networkx object

        name = apk_names[apk_ind]
        name = name.replace(".apk", "")
        with open(os.path.join(target_dir, "{}.joblib".format()), 'wb') as file:
            obj = [a, dx]
            dump(obj, file, compress = "zlib")
        file.close()



    print("All Done!")

def features_encoder(node_data):
    """
    encoding the feature dictionary from .get_call_graph() from Androguard
    """
    keywords= ["external", 'entrypoint', 'native', 'public', 'static'] #'vm', 'codesize']
    vector = []
    for keyword in keywords:
        try:
            if node_data[keyword] == True:
                vector.append(1)
            else:
                vector.append(0)
        except:
            vector.append(0)

    return vector

def features_encoder2(node_data):
    '''
    gets the node type for an individual node

    returns a string
    '''
    keywords = ["external", 'entrypoint', 'native', 'public', 'static']

    string = ""
    for keyword in keywords:
        if node_data[keyword] == True:
            string += (keyword + ",")

    string = string[:-1]
    string += "Node"
    return string






def test():
    """just a simple testing function"""

    current_dir = os.getcwd()
    target_dir = os.path.join(current_dir, "output_GROUP3_PICKLES")
    if not os.path.exists(target_dir):
        os.makedirs(target_dir)
    with open(os.path.join(target_dir, "file.txt"), 'w') as file:
        file.write("wow this is a test")

    file.close()

    print(target_dir)
def get_fp(directory):
    """
    gets the file paths of APK files in a given directory

    directory --> string FILEPATH of the directory that contains APK files
    """

    apks = [] # list of apk filenames
    apk_names = []
    for root, dirs, files in os.walk(directory):
        for name in files:
            if ".apk" in name:
                apk_fp = os.path.join(directory, name)
                apks.append(apk_fp)
                apk_names.append(name)

    return (apks, apk_names)


class AndroTest(auto.DirectoryAndroAnalysis):
    def __init__(self, path):
        super(AndroTest, self).__init__(path)
        self.has_crashed = False
        one, two = self.get_fp(path)
        apk_fps.append(one)
        apk_names.append(two)
        self.apk_fps = np.hstack(apk_fps)
        self.apk_names = np.hstack(apk_names)

        current_dir = os.getcwd()
        self.target_dir = os.path.join(current_dir, "output_GROUP3_PICKLES")
        if not os.path.exists(self.target_dir):
            os.makedirs(self.target_dir)


    def get_fp(self, directory):
        """
        gets the file paths of APK files in a given directory

        directory --> string FILEPATH of the directory that contains APK files
        """

        apks = [] # list of apk filenames
        apk_names = []
        for root, dirs, files in os.walk(directory):
            for name in files:
                if ".apk" in name:
                    apk_fp = os.path.join(directory, name)
                    apks.append(apk_fp)
                    apk_names.append(name)

        return (apks, apk_names)

    def analyze_and_pickle(self, apkobj, analysisobj):
    # apk_fps, apk_names):
        """
        does the required analysis and outputs pickle files
        creates a folder named "output_GROUp3s_pickles", and adds the necessary
        files in it

        apk_fps --> a list of file paths to the apks
        apk_names --> a list of corresponding apk names
        """
        # start processing

        # for apk_ind in range(0, len(apk_fps)):
        #     print("Working on: ", apk_names[apk_ind])
        #     a, _, dx = misc.AnalyzeAPK(apk_fps[apk_ind])
        #     # call_graph_fromdx = call_graph(dx)  # gets the CFG of an app, should be a networkx object

        appname = apkobj.get_app_name()
        print("Working on App: ", appname)
        with lzma.open(os.path.join(self.target_dir, "{}_apk.p.lzma".format(appname)), "wb") as file:
            pickle.dump(apkobj, file)
        file.close()

        with lzma.open(os.path.join(self.target_dir, "{}_dx.p.lzma".format(appname)), "wb") as file:
            # It looks like here is the recursion problem...
            sys.setrecursionlimit(50000)
            pickle.dump(analysisobj, file)
        file.close()

        print("All Done! ")

    def analysis_app(self, log, apkobj, dexobj, analysisobj):
        self.analyze_and_pickle(apkobj, analysisobj)
        # Just print all objects to stdout
        print(log.id_file, log.filename, apkobj, dexobj, analysisobj)

    def finish(self, log):
       # This method can be used to save information in `log`
       # finish is called regardless of a crash, so maybe store the
       # information somewhere
       if self.has_crashed:
          print("Analysis of {} has finished with Errors".format(log))
       else:
          print("Analysis of {} has finished!".format(log))

    def crash(self, log, why):
       # If some error happens during the analysis, this method will be
       # called
       self.has_crashed = True
       print("Error during analysis of {}: {}".format(log, why), file=sys.stderr)




if __name__ == "__main__":
    now = datetime.now()


    filepath = []

    apk_fps = []
    apk_names = []
    # user_input = input("Please enter the full directory containing the APK files: ")

    user_input = r"C:\Users\USER\Documents\GitHub\dsc180b-localtesting\data"
    data_directory = os.path.join(user_input)
    print(os.path.exists(data_directory))

    # for i, arg in enumerate(sys.argv):
    #     filepath.append(arg)
    #
    # for fp in filepath:



    print("Will create a folder named 'output_GROUP3_PICKLES' where this .py file is located, \
    \n and will add the compressed pickle.lzma files in it")
    # analyze_and_pickle(apk_fps, apk_names)



    # # androtest implementation
    settings = {
        # The directory `some/directory` should contain some APK files
        "my": AndroTest(data_directory),
        # Use the default Logger
        "log": auto.DefaultAndroLog,
        # Use maximum of 2 threads
        "max_fetcher": 2,
    }
    aa = auto.AndroAuto(settings)
    aa.go()
    print("Time took for the decompile and analysis of 1 app: ", (datetime.now() - now))
