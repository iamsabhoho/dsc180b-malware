
import numpy as np
import os


import numpy as np
from sklearn.pipeline import Pipeline, make_pipeline
from sklearn.linear_model import LogisticRegression
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier


import sys,inspect
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
parentdir = os.path.dirname(currentdir)
sys.path.insert(0,parentdir)

from data import data_androguard



class model:

    def __init__(self, model_type):
        self.X_train, self.y_train, self.X_test, self.y_test = None, None, None, None

        # if model_type == "baseline":
            # self.clf = self.init_baseline()

        if model_type == "baseline":
            self.clf = LogisticRegression()

        elif model_type == "SVM":
            # https://scikit-learn.org/stable/modules/svm.html#using-the-gram-matrix
            self.clf = SVC(gamma=10)

        elif model_type == "KNN":
            # https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html
            self.clf = KNeighborsClassifier(n_neighbors = 3)

        elif model_type == "RF":
            # https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html
            self.clf = RandomForestClassifier(max_depth = 2, random_state = 0)

        






    def init_baseline(self, X, y):
        '''
        baseline is logistic regression
        '''

        self.clf = LogisticRegression().fit(X, y)

        score = self.clf.score(X, y)

        return self.clf




if __name__ == "__main__":
    print("main")
